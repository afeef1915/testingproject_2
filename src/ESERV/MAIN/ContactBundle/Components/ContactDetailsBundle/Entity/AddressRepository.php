<?php
            
        /*
            This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
            information. Thanks.
        */

        namespace ESERV\MAIN\ContactBundle\Components\ContactDetailsBundle\Entity;

        use Doctrine\ORM\EntityRepository;
        use Doctrine\Common\Collections;
        use Symfony\Component\DependencyInjection\Container;

        /**
         * ActivityRepository
         *
         * This class was generated by the Doctrine ORM. Add your own custom
         * repository methods below.
         */ 
        class AddressRepository extends EntityRepository
        {             
            public function getPrimaryAddressByContact($contact) {
                $query = $this->createQueryBuilder('a')
                                ->Where('a.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('a.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->getQuery();   
                try {
                    $primary_address= $query->getSingleResult();
                    return $primary_address;
                } catch (\Doctrine\ORM\NonUniqueResultException $e) { 
                    return null;
                }
                catch (\Doctrine\ORM\NoResultException  $e) { 
                    return null;
                }
            } 
            
            public function getNonPrimaryAddressByContact($contact) {
                $non_prim_add = $this->createQueryBuilder('a')
                        ->select('a, at')
                        ->leftJoin('a.addressType', 'at')
                        ->Where('a.contact = :c')
                        ->setParameter('c', $contact) 
                        ->andWhere('a.primaryRecord = :pr')
                        ->setParameter('pr', 'N') 
                        ->getQuery()
                        ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

                $non_prim_addArray = array();
                foreach ($non_prim_add as $a) {                   
                    $non_prim_addArray[$a['id']] = $a['addressLine1'].' '.$a['addressLine2'].' '.$a['addressLine3'].
                            ' '.$a['town'].' '.$a['county'].' '.$a['postcode'].'('.$a['addressType']['name'].')';
                }
                return $non_prim_addArray;                
            }
            
            public function getPrimaryTypeIdByContact($contact) {
                //$log = $this->get('logger');
                $query = $this->createQueryBuilder('a')
                                ->Where('a.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('a.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->getQuery();               
                try {
                    $primary_address= $query->getSingleResult();
                    return $primary_address->getAddressType()->getId();
                } catch (\Doctrine\ORM\NoResultException $e) { 
                   // $log->info($e);
                    return null;
                } 
            }            
            
            public function existPrimaryRecordForContact($contact, $exclude_addId = 0) { 
                $query = $this->createQueryBuilder('a')
                                ->Where('a.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('a.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->andWhere('a.id != :exId')
                                ->setParameter('exId', $exclude_addId)
                                ->getQuery();
                
                try {
                    $primary_address= $query->getSingleResult();
                    return true;
                } catch (\Doctrine\ORM\NoResultException $e) {
                    return false;
                }   
            } 
            
            public function existPrimaryRecordForContactAndAddType($contact, $addressType = 0) { 
                $query = $this->createQueryBuilder('a')
                                ->Where('a.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('a.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->andWhere('a.addressType != :addType')
                                ->setParameter('addType', $addressType)
                                ->getQuery();
                
                try {
                    $primary_address= $query->getSingleResult();
                    return true;
                } catch (\Doctrine\ORM\NoResultException $e) {
                    return false;
                }   
            }

        }