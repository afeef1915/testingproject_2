<?php
            
        /*
            This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
            information. Thanks.
        */

        namespace ESERV\MAIN\ContactBundle\Components\ContactDetailsBundle\Entity;

        use Doctrine\ORM\EntityRepository;

        /**
         * ActivityRepository
         *
         * This class was generated by the Doctrine ORM. Add your own custom
         * repository methods below.
         */
        class PhoneRepository extends EntityRepository
        {  
            public function getPrimaryPhoneByContact($contact) {
                $query = $this->createQueryBuilder('p')
                                ->Where('p.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('p.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->getQuery(); 
                try {
                    $primary_phone = $query->getSingleResult();
                    return $primary_phone;
                } catch (\Doctrine\ORM\NonUniqueResultException  $e) { 
                    return null;
                } 
                catch (\Doctrine\ORM\NoResultException  $e) { 
                    return null;
                }
            } 
            
            public function getNonPrimaryPhoneByContact($contact) {
                $non_prim_phone = $this->createQueryBuilder('p')
                        ->select('p, pt')
                        ->leftJoin('p.phoneType', 'pt')
                        ->Where('p.contact = :c')
                        ->setParameter('c', $contact) 
                        ->andWhere('p.primaryRecord = :pr')
                        ->setParameter('pr', 'N') 
                        ->getQuery()
                        ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

                $non_prim_phoneArray = array();
                foreach ($non_prim_phone as $a) {                   
                    $non_prim_phoneArray[$a['id']] = $a['phoneNumber'].'('.$a['phoneType']['name'].')';
                }
                return $non_prim_phoneArray;                
            }
            
            public function getPrimaryTypeIdByContact($contact_id) {
                $query = $this->createQueryBuilder('p')
                                ->Where('p.contact = :c')
                                ->setParameter('c', $contact_id) 
                                ->andWhere('p.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->getQuery();               
                
                try {
                    $primary_phone= $query->getSingleResult();
                    return $primary_phone->getPhoneType()->getId();
                } catch (\Doctrine\ORM\NoResultException $e) { 
                   // $log->info($e);
                    return null;
                } 
            } 
            
            public function existPrimaryRecordForContact($contact, $exclude_phoneId = 0) { 
                $query = $this->createQueryBuilder('p')
                                ->Where('p.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('p.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->andWhere('p.id != :exId')
                                ->setParameter('exId', $exclude_phoneId)
                                ->getQuery();                
                 
                try {
                    $primary_phone= $query->getSingleResult();
                    return true;
                } catch (\Doctrine\ORM\NoResultException $e) {
                    return false;
                }
            }
            
            public function getOrgPhoneByContactAndApcCode($contact, $apc_code ,$primary='N'){
                $query = $this->createQueryBuilder('p')
                        ->leftJoin('p.phoneType', 'apc')
                        ->leftJoin('apc.applicationCodeType', 'apct')
                        ->where('p.primaryRecord = :primary')
                        ->setParameter('primary', $primary)
                        ->andWhere('apct.code = :phone')
                        ->setParameter('phone', 'PHONE')
                        ->andWhere('apc.code = :code')
                        ->setParameter('code', $apc_code)
                        ->andWhere('p.contact = :contact')
                        ->setParameter('contact', $contact)
                        ->getQuery();
                $result = $query->getOneOrNullResult();
                return $result;                
            }
            
        }