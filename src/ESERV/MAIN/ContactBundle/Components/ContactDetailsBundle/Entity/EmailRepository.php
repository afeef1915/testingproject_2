<?php
            
        /*
            This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
            information. Thanks.
        */

        namespace ESERV\MAIN\ContactBundle\Components\ContactDetailsBundle\Entity;

        use Doctrine\ORM\EntityRepository;

        /**
         * ActivityRepository
         *
         * This class was generated by the Doctrine ORM. Add your own custom
         * repository methods below.
         */
        class EmailRepository extends EntityRepository
        { 
            public function getPrimaryEmailByContact($contact) {
                $query = $this->createQueryBuilder('e')
                                ->Where('e.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('e.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->getQuery(); 
                try {
                    $primary_email= $query->getSingleResult();                    
                    return $primary_email;
                } catch (\Doctrine\ORM\NoResultException $e) { 
                    return null;
                } catch (\Doctrine\ORM\NonUniqueResultException $e) { 
                    return null;
                }
            } 
            
            public function getNonPrimaryEmailByContact($contact) {
                $non_prim_email = $this->createQueryBuilder('e')
                        ->select('e, et')
                        ->leftJoin('e.emailType', 'et')
                        ->Where('e.contact = :c')
                        ->setParameter('c', $contact) 
                        ->andWhere('e.primaryRecord = :pr')
                        ->setParameter('pr', 'N') 
                        ->getQuery()
                        ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

                $non_prim_emailArray = array();
                foreach ($non_prim_email as $a) {                   
                    $non_prim_emailArray[$a['id']] = $a['emailAddress'].'('.$a['emailType']['name'].')';
                }
                return $non_prim_emailArray;                
            }
            
            public function getPrimaryTypeIdByContact($contact_id) {
                //$log = $this->get('logger');
                $query = $this->createQueryBuilder('e')
                                ->Where('e.contact = :c')
                                ->setParameter('c', $contact_id) 
                                ->andWhere('e.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->getQuery(); 
                try {
                    $primary_email= $query->getSingleResult();
                    return $primary_email->getEmailType()->getId();
                } catch (\Doctrine\ORM\NoResultException $e) { 
                   // $log->info($e);
                    return null;
                } 
            } 
            
            public function existPrimaryRecordForContact($contact, $exclude_emailId = 0) { 
                $query = $this->createQueryBuilder('e')
                                ->Where('e.contact = :c')
                                ->setParameter('c', $contact) 
                                ->andWhere('e.primaryRecord = :pr')
                                ->setParameter('pr', 'Y') 
                                ->andWhere('e.id != :exId')
                                ->setParameter('exId', $exclude_emailId)
                                ->getQuery();                                
                try {
                    $primary_email= $query->getSingleResult();
                    return true;
                } catch (\Doctrine\ORM\NoResultException $e) {
                    return false;
                }
            } 
        }