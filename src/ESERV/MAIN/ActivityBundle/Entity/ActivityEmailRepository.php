<?php

namespace ESERV\MAIN\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityEmailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityEmailRepository extends EntityRepository
{     
    public function getByActivityTargetId($activity_target_id) {
        try {
            $query = $this->createQueryBuilder('a')
                          ->leftJoin('a.activityTarget', 't')
                          ->where('t.id = :activityTargetId')
                          ->setParameter('activityTargetId', $activity_target_id)
                          ->getQuery();

            $result = $query->getOneOrNullResult();
        } catch (Exception $ex) {
            $result = FALSE;
        }
        
        return $result;
    } #getByActivityTargetId end

    public function getByActivity($activity_id, $col = 'ALL') {
        $data_arr = array();

        try {
        if ($col === 'ALL') {
            $query = $this->createQueryBuilder('ae')
                          ->select('ae', 'at', 'c')
                          ->leftJoin('ae.activityTarget', 'at')
                          ->leftJoin('at.contact', 'c')
                          ->where('at.activity = :act_id')
                          ->setParameter('act_id', $activity_id)
                          ->getQuery();
            $data_arr = $query->execute();
        } else {
            $result = array();
        }                

        } catch (\Exception $ex) {
            $data_arr = array();
            echo $ex->getMessage(); die;
        }

        return $data_arr;
    } #getByActivity end                
    
    public function updateByActivityId(
        $activity_id_arr
       ,$new_status_date_time = NULL
       ,$new_status_id = NULL
       ,$curr_status_id = NULL
    ) {
        $count_act_ids = count($activity_id_arr);
        if ($count_act_ids > 0) {
            $qb2 = $this->getEntityManager()->createQueryBuilder();
            $select = $qb2->select('at.id')
                          ->from('ESERVMAINActivityBundle:ActivityTarget', 'at');
            if ($count_act_ids == 1) {
                $qb2->where('at.activity = :act_ids');
            } else {
                $qb2->where('at.activity IN (:act_ids)');
            }
            $qb2->getQuery();
            
            $qb = $this->getEntityManager()->createQueryBuilder();
            $upd = $qb->update('ESERVMAINActivityBundle:ActivityEmail', 'a');
            if (!(is_null($new_status_date_time))) {
                $upd->set('a.statusDate', $qb->expr()->literal($new_status_date_time));
            }
            if (!(is_null($new_status_id))) {
                $upd->set('a.emailStatusSystemCode', $new_status_id);
            }
            $upd->where($qb->expr()->in('a.activityTarget', $select->getDQL()))
                ->setParameter('act_ids', array_values($activity_id_arr));
            if (!(is_null($curr_status_id))) {
                $upd->andWhere('a.emailStatusSystemCode = :current_status')
                    ->setParameter('current_status', $curr_status_id);
            }
            $upd->getQuery()
                ->execute();             
        }
        
        return TRUE;
    } #updateByActivityId end    

    public function createActivityEmail(
        $activity_target
       ,$email_status_system_code
       ,$status_date
       ,$from_email_address
       ,$to_email_address
       ,$email_subject
       ,$em
    ) {
        $activity_email = new \ESERV\MAIN\ActivityBundle\Entity\ActivityEmail();
        if ($activity_target instanceof \ESERV\MAIN\ActivityBundle\Entity\ActivityTarget) {
            $activity_email->setActivityTarget($activity_target);
        } else {
            $act_target = $em->getReference('ESERV\MAIN\ActivityBundle\Entity\ActivityTarget', $activity_target);            
            $activity_email->setActivityTarget($act_target);
        }
        if ($email_status_system_code instanceof \ESERV\MAIN\SystemConfigBundle\Entity\SystemCode) {
            $activity_email->setEmailStatusSystemCode($email_status_system_code);
        } else {
            $system_code = $em->getReference('ESERV\MAIN\SystemConfigBundle\Entity\SystemCode', $email_status_system_code);            
            $activity_email->setEmailStatusSystemCode($system_code);
        }        
        $activity_email->setStatusDate($status_date);
        $activity_email->setFromEmailAddress($from_email_address);
        $activity_email->setToEmailAddress($to_email_address);
        $activity_email->setEmailSubject($email_subject);
        $em->persist($activity_email);
        $em->flush();
        
        return $activity_email;
    } #createActivityEmail end

}
