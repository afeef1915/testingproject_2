<?php
            
/*
    This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
    information. Thanks.
*/

namespace ESERV\MAIN\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityMergeDataRepository extends EntityRepository
{   
    const REPOSITORY_NAME = 'ActivityMergeDataRepository';
    
    public function createActivityMergeData(
        $activity_target
       ,$merge_fields
       ,$merge_data
       ,$em
    ) {
        $act_mer_data = new \ESERV\MAIN\ActivityBundle\Entity\ActivityMergeData();
        if ($activity_target instanceof \ESERV\MAIN\ActivityBundle\Entity\ActivityTarget) {
            $act_mer_data->setActivityTarget($activity_target);
        } else {
            $act_target = $em->getReference('ESERV\MAIN\ActivityBundle\Entity\ActivityTarget', $activity_target);            
            $act_mer_data->setActivityTarget($act_target);
        }
        $act_mer_data->setMergeFields($merge_fields);
        $act_mer_data->setMergeData($merge_data);
        $em->persist($act_mer_data);
        $em->flush();
        
        return $act_mer_data;
    } #createActivityMergeData end
    
    public function deleteActivityMergeDataByActivityTargetId(
        $act_target_id_arr
       ,$insert_mtl_error = TRUE
    ) {    
        try {
            if (count($act_target_id_arr) > 0) {
                $del = $this->getEntityManager()
                            ->createQueryBuilder()
                            ->delete('ESERVMAINActivityBundle:ActivityMergeData', 'amd')
                            ->where('amd.activityTarget IN (:act_target_ids)')
                            ->setParameter('act_target_ids', array_values($act_target_id_arr))
                            ->getQuery();
                $del->execute();
            }
            
            $success = TRUE;
            $message = NULL;            
        } catch (\Exception $ex) {
            $function = 'deleteActivityMergeDataByActivityTargetId';
            
            if ($insert_mtl_error === TRUE) { 
                $message = sprintf(
                               '$act_target_id_arr: array(%s), Exception: %s'
                              ,implode(',', $act_target_id_arr)
                              ,$ex->getMessage()
                           );
                $this->c->get('db_core_function_services')
                        ->insertMtlError(
                              ($function . '(' . self::REPOSITORY_NAME. ')')
                             ,$message
                          );
            } else {
                $message = sprintf(
                               $function . 
                               ' $act_target_id_arr: array(%s) (%s), ' . 
                               'Exception: %s'
                              ,implode(',', $act_target_id_arr)
                              ,self::REPOSITORY_NAME
                              ,$ex->getMessage()
                           );
            }
            $success = FALSE;
        }
        $result_arr = array(
            'success' => $success,
            'msg' => $message
        );        
        
        return $result_arr;
    } #deleteActivityJobById end

}