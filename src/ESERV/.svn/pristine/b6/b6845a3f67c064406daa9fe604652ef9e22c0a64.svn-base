<?php
            
/*
    This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
    information. Thanks.
*/

namespace ESERV\MAIN\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityJobRepository extends EntityRepository
{   
    const REPOSITORY_NAME = 'ActivityJobRepository';

    public function createActivityJob(
        $document_job
       ,$activity
       ,$em
    ) {
        $act_job = new \ESERV\MAIN\ActivityBundle\Entity\ActivityJob();
        if ($document_job instanceof \ESERV\MAIN\CommunicationsBundle\Entity\DocumentJob) {
            $act_job->setDocumentJob($document_job);
        } else {
            $doc_job = $em->getReference('ESERV\MAIN\CommunicationsBundle\Entity\DocumentJob', $document_job);            
            $act_job->setDocumentJob($doc_job);
        }
        if ($activity instanceof \ESERV\MAIN\ActivityBundle\Entity\Activity) {
            $act_job->setActivity($activity);
        } else {
            $act = $em->getReference('ESERV\MAIN\ActivityBundle\Entity\Activity', $activity);            
            $act_job->setActivity($act);
        }
        $em->persist($act_job);
        $em->flush();
        
        return $act_job;
    } #createActivityJob end   
    
    /**
     * Name: getByDocumentJob
     * 
     * @param type $document_job_id
     */
    public function getByDocumentJob($document_job_id) {
        $data_arr = array();

        try {
            $result = $this->getEntityManager()->createQueryBuilder();
            $data_arr = $result->select('a.id AS activity_id, aj.id AS activity_job_id, dj.id AS document_job_id')
                               ->from('ESERVMAINActivityBundle:ActivityJob', 'aj')
                               ->innerJoin('aj.activity', 'a')
                               ->innerJoin('aj.documentJob', 'dj')
                               ->where('dj.id = :document_job_id')
                               ->setParameter('document_job_id', $document_job_id)   
                               ->andWhere('dj.queuedDate IS NOT NULL')
                               ->getQuery()
                               ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);            
        } catch (\Exception $ex) {
            $data_arr = array();
        }

        return $data_arr;
    } #getByDocumentJob end

    public function deleteActivityJobById(
        $act_job_id_arr
       ,$insert_mtl_error = TRUE
    ) {    
        try {
            if (count($act_job_id_arr) > 0) {
                $del = $this->getEntityManager()
                            ->createQueryBuilder()
                            ->delete('ESERVMAINActivityBundle:ActivityJob', 'aj')
                            ->where('aj.id IN (:ids)')
                            ->setParameter('ids', array_values($act_job_id_arr))
                            ->getQuery();
                $del->execute();
            }
            
            $success = TRUE;
            $message = NULL;            
        } catch (\Exception $ex) {
            $function = 'deleteActivityJobById';
            
            if ($insert_mtl_error === TRUE) { 
                $message = sprintf(
                               '$act_job_id_arr: array(%s), Exception: %s'
                              ,implode(',', $act_job_id_arr)
                              ,$ex->getMessage()
                           );
                $this->c->get('db_core_function_services')
                        ->insertMtlError(
                              ($function . '(' . self::REPOSITORY_NAME. ')')
                             ,$message
                          );
            } else {
                $message = sprintf(
                               $function . 
                               ' $act_job_id_arr: array(%s) (%s), ' . 
                               'Exception: %s'
                              ,implode(',', $act_job_id_arr)
                              ,self::REPOSITORY_NAME
                              ,$ex->getMessage()
                           );
            }
            $success = FALSE;
        }
        $result_arr = array(
            'success' => $success,
            'msg' => $message
        );        
        
        return $result_arr;
    } #deleteActivityJobById end    
}