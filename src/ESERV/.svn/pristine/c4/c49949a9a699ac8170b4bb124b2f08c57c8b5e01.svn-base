<?php

/*
  This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
  information. Thanks.
 */

namespace ESERV\MAIN\MembershipBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MemberDisciplinaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberDisciplinaryRepository extends EntityRepository {

    public function getLatestMemberDisciplinaryByContact($contactId) {
        $qb = $this->createQueryBuilder('md')
                ->select('md')
                ->leftJoin('md.member', 'm')
                ->leftJoin('m.contact', 'c')
                ->where('c.id = :cId')
                ->setParameter('cId', $contactId)
                ->andWhere('md.endDate IS NULL OR md.endDate >= :eDate')
                ->setParameter('eDate', (new \DateTime()))
                ->orderBy('md.startDate', 'DESC')
                ->setMaxResults(1)
        ;
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function getLatestMemberDisciplinaryByMember($memberId) {
        $qb = $this->createQueryBuilder('md')
                ->select('md')
                ->leftJoin('md.member', 'm')
                ->where('m.id = :mId')
                ->setParameter('mId', $memberId)
                ->andWhere('md.endDate IS NULL OR md.endDate >= :eDate')
                ->setParameter('eDate', (new \DateTime()))
                ->orderBy('md.startDate', 'DESC')
                ->setMaxResults(1)
        ;
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function getAllLatestMemberDisciplinaryByContact($contactId) {
        $qb = $this->createQueryBuilder('md')
                ->select('md')
                ->leftJoin('md.member', 'm')
                ->leftJoin('m.membershipOrg', 'mo')
                ->leftJoin('mo.organisation', 'o')
                ->leftJoin('m.contact', 'c')
                ->where('c.id = :cId')
                ->setParameter('cId', $contactId)
                ->andWhere('md.endDate IS NULL OR md.endDate >= :eDate')
                ->setParameter('eDate', (new \DateTime()))
                ->orderBy('md.startDate', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }

}
