<?php
            
/*
    This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
    information. Thanks.
*/

namespace ESERV\MAIN\ProfileBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MmUserSettingRepository extends EntityRepository
{   
    public function getRelById($mm_user_setting_id) {
        $result = array();

        try {
            $result = $this->createQueryBuilder('m')
                           ->innerJoin('m.relationship', 'r')
                           ->where('m.id = :MmUserSettingId')
                           ->setParameter('MmUserSettingId', $mm_user_setting_id)
                           ->getQuery()
                           ->getOneOrNullResult()
                    ;
        } catch (\Exception $ex) {
            $result = array();
            #var_dump($ex->getMessage()); die;
        }

        return $result;
    } #getRelById
    
    public function getContactByFosUser($fos_user_id) {
        $return_result = FALSE;

        try {
            $return_result = $this->createQueryBuilder('m')
                           ->innerJoin('m.fosUser', 'fu')
                           ->innerJoin('m.contact', 'c')
                           ->where('fu.id = :FosUserId')
                           ->setParameter('FosUserId', $fos_user_id)
                           ->getQuery()
                           ->getOneOrNullResult();
        } catch (\Exception $ex) {
            $return_result = FALSE;
            #var_dump($ex->getMessage()); die;
        }

        return $return_result;
    } #getContactByFosUser
    
    public function getByFosUser($fos_user_id) {
        $return_result = FALSE;

        try {
            $return_result = $this->createQueryBuilder('m')
                                  ->select('m')
                                  ->innerJoin('m.fosUser', 'fu')
                                  ->where('fu.id = :FosUserId')
                                  ->setParameter('FosUserId', $fos_user_id)
                                  ->getQuery()
                                  ->getOneOrNullResult();
        } catch (\Exception $ex) {
            $return_result = FALSE;
            #var_dump($ex->getMessage()); die;
        }

        return $return_result;
    } #getByFosUser
}