<?php
            
/*
    This file has been generated using MTL ESERV:BUILD command. Contact Anjana on anjana@millertech.co.uk for more
    information. Thanks.
*/

namespace ESERV\MAIN\ActivityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityTargetRepository extends EntityRepository
{   
    const REPOSITORY_NAME = 'ActivityTargetRepository';    

    public function getTargetsByActivityId($activity_id) {
        $targets = array();
        $query = $this->createQueryBuilder('at')
            ->where('at.activity = :activity_id')
            ->setParameter('activity_id', $activity_id)
            ->getQuery();


        $activity_targets = $query->getResult();
        foreach($activity_targets as $activity_target){
            $targets[$activity_target->getContact()->getId()] = $activity_target->getContact()->getDisplayName();
        }
        return $targets;
    }

    public function getByActivity($activity_id_arr) {
        $data_arr = array();

        try {
            if (count($activity_id_arr) > 0) {
                $result = $this->getEntityManager()->createQueryBuilder();
                $data_arr = $result->select('at.id AS id')
                        ->from('ESERVMAINActivityBundle:ActivityTarget', 'at')
                        ->where('at.activity IN (:act_ids)')
                        ->setParameter('act_ids', array_values($activity_id_arr))                        
                        ->getQuery()
                        ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            }
        } catch (\Exception $ex) {
            $data_arr = array();
        }

        return $data_arr;
    } #getByActivity end

    public function deleteActivityTargetById(
        $act_target_id_arr
       ,$insert_mtl_error = TRUE
    ) {    
        try {
            if (count($act_target_id_arr) > 0) {
                $del = $this->getEntityManager()
                            ->createQueryBuilder()
                            ->delete('ESERVMAINActivityBundle:ActivityTarget', 'at')
                            ->where('at.id IN (:ids)')
                            ->setParameter('ids', array_values($act_target_id_arr))
                            ->getQuery();
                $del->execute();
            }

            $success = TRUE;
            $message = NULL;            
        } catch (\Exception $ex) {
            $function = 'deleteActivityTargetById';

            if ($insert_mtl_error === TRUE) { 
                $message = sprintf(
                               '$act_target_id_arr: array(%s), Exception: %s'
                              ,implode(',', $act_target_id_arr)
                              ,$ex->getMessage()
                           );
                $this->c->get('db_core_function_services')
                        ->insertMtlError(
                              ($function . '(' . self::REPOSITORY_NAME. ')')
                             ,$message
                          );
            } else {
                $message = sprintf(
                               $function . 
                               ' $act_target_id_arr: array(%s) (%s), ' . 
                               'Exception: %s'
                              ,implode(',', $act_target_id_arr)
                              ,self::REPOSITORY_NAME
                              ,$ex->getMessage()
                           );
            }
            $success = FALSE;
        }
        $result_arr = array(
            'success' => $success,
            'msg' => $message
        );        

        return $result_arr;
    } #deleteActivityJobById end

    public function createActivityTarget(
        $em
       ,$activity
       ,$contact
    ) {
        $activity_target = new \ESERV\MAIN\ActivityBundle\Entity\ActivityTarget();
        if (!($activity instanceof \ESERV\MAIN\ActivityBundle\Entity\Activity)) {
            $activity = $em->getReference('ESERV\MAIN\ActivityBundle\Entity\Activity', $activity);                        
        }
        $activity_target->setActivity($activity);
        if (!($contact instanceof \ESERV\MAIN\ContactBundle\Entity\Contact)) {
            $contact = $em->getReference('ESERV\MAIN\ContactBundle\Entity\Contact', $contact);
        }
        $activity_target->setContact($contact);        
        $em->persist($activity_target);
        $em->flush();

        return $activity_target;
    } #createActivityTarget end
}